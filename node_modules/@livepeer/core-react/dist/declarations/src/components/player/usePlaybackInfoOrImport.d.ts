import { CreateAssetUrlProgress } from '@livepeer/core/types';
import { parseCid } from '@livepeer/core/utils';
import { PlayerProps } from './Player';
export type UsePlaybackInfoOrImportProps<TElement, TPoster> = {
    decentralizedSrcOrPlaybackId: ReturnType<typeof parseCid>;
    playbackId: PlayerProps<TElement, TPoster>['playbackId'];
    refetchPlaybackInfoInterval: number;
    autoUrlUpload: boolean | {
        fallback: true;
        gateway?: string;
    };
    onAssetStatusChange: (status: CreateAssetUrlProgress) => void;
};
/**
 * Retrieves the playback info for a playback ID or source URL.
 * Conditionally, automatically imports a source URL from IPFS or Arweave.
 *
 * @param src Source URL for the media.
 * @param playbackId Playback ID of the media.
 */
export declare const usePlaybackInfoOrImport: <TElement, TPoster>({ decentralizedSrcOrPlaybackId, playbackId, refetchPlaybackInfoInterval, autoUrlUpload, onAssetStatusChange, }: UsePlaybackInfoOrImportProps<TElement, TPoster>) => import("@livepeer/core").PlaybackInfo | undefined;
