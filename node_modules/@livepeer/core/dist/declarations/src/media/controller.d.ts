import { StoreApi } from 'zustand/vanilla';
import { ClientStorage } from '../storage';
export declare const DEFAULT_VOLUME_LEVEL = 0.2;
export declare const DEFAULT_AUTOHIDE_TIME = 3000;
export type DeviceInformation = {
    isMobile: boolean;
    isIos: boolean;
    isAndroid: boolean;
};
export type MediaSizing = {
    container?: ElementSize;
    media?: ElementSize;
};
export type ElementSize = {
    width: number;
    height: number;
};
export type MediaControllerState<TElement = void> = {
    /** If the media has loaded and can be played */
    canPlay: boolean;
    /** If the controls are currently hidden */
    hidden: boolean;
    /** The last time that the media was interacted with */
    _lastInteraction: number;
    /** Current volume of the media */
    volume: number;
    /** If media is muted */
    muted: boolean;
    /** If media supports changing the volume */
    isVolumeChangeSupported: boolean;
    /** If the media is current playing or paused */
    playing: boolean;
    /** If the media has been played yet */
    hasPlayed: boolean;
    /** If the media is fullscreen */
    fullscreen: boolean;
    /** The playback rate for the media */
    playbackRate: number;
    /** If the media has an error */
    error?: string;
    /** If the media is currently waiting for data */
    waiting: boolean;
    /** If the media is currently stalled */
    stalled: boolean;
    /** If the media is currently loading */
    loading: boolean;
    /** If the media is in picture in picture mode */
    pictureInPicture: boolean;
    /** The last time that play/pause was requested */
    _requestedPlayPauseLastTime: number;
    /** The last time that fullscreen was changed */
    _requestedFullscreenLastTime: number;
    /** The last time that picture in picture was changed*/
    _requestedPictureInPictureLastTime: number;
    /** If the content is live media */
    live: boolean;
    /** Current progress of the media */
    progress: number;
    /** Current total duration of the media */
    duration: number;
    /** Current buffered end time for the media */
    buffered: number;
    /** Internal value when a user requests an update to the progress of the media */
    _requestedRangeToSeekTo: number;
    /** Internal element used for playing media */
    _element: TElement | null;
    /** Media sizing information */
    size?: MediaSizing;
    /** Device tracking set on load of the media */
    device: DeviceInformation;
    setHidden: (hidden: boolean) => void;
    _updateLastInteraction: () => void;
    onCanPlay: () => void;
    onPlay: () => void;
    onPause: () => void;
    togglePlay: (force?: boolean) => void;
    onProgress: (time: number) => void;
    onDurationChange: (duration: number) => void;
    _updateBuffered: (buffered: number) => void;
    requestSeek: (time: number) => void;
    requestSeekBack: (difference?: number) => void;
    requestSeekForward: (difference?: number) => void;
    _requestSeekDiff: (difference: number) => void;
    setLive: (fullscreen: boolean) => void;
    setSize: (size: MediaSizing) => void;
    setFullscreen: (fullscreen: boolean) => void;
    setPictureInPicture: (pictureInPicture: boolean) => void;
    requestToggleFullscreen: () => void;
    requestTogglePictureInPicture: () => void;
    _setVolume: (volume: number) => void;
    requestVolume: (volume: number) => void;
    requestToggleMute: () => void;
    setIsVolumeChangeSupported: (supported: boolean) => void;
    setWaiting: (waiting: boolean) => void;
    setError: (error: string) => void;
    setStalled: (stalled: boolean) => void;
    setLoading: (stalled: boolean) => void;
};
export type MediaControllerStore<TElement> = StoreApi<MediaControllerState<TElement>>;
export declare const createControllerStore: <TElement>({ element, device, storage, opts, }: {
    element: TElement | null;
    device: DeviceInformation;
    storage: ClientStorage;
    opts: ControlsOptions;
}) => Omit<StoreApi<MediaControllerState<TElement>>, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<MediaControllerState<TElement>, Partial<MediaControllerState<TElement>>>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void>;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: MediaControllerState<TElement>) => void) => () => void;
        onFinishHydration: (fn: (state: MediaControllerState<TElement>) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<MediaControllerState<TElement>, Partial<MediaControllerState<TElement>>>>;
    };
};
export type ControlsOptions = {
    /** Auto-hide controls after a set amount of time (in milliseconds). Defaults to 3000. Set to 0 for no hiding. */
    autohide?: number;
    /** Sets the default volume. Must be between 0 and 1. */
    defaultVolume?: number;
};
