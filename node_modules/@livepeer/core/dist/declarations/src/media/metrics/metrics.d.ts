import { MediaControllerStore } from '../controller';
type RawMetrics = {
    firstPlayback: number;
    nWaiting: number;
    timeWaiting: number;
    nStalled: number;
    timeStalled: number;
    timeUnpaused: number;
    nError: number;
    lastError?: string;
    videoHeight: number | null;
    videoWidth: number | null;
    playerHeight: number | null;
    playerWidth: number | null;
    playbackScore: number | null;
    player: 'generic';
    pageUrl: string;
    sourceUrl: string;
    duration: number | null;
};
type PlaybackRecord = {
    clockTime: number;
    mediaTime: number;
    score: number;
};
export declare class PlaybackMonitor<TElement> {
    active: boolean;
    values: PlaybackRecord[];
    score: number | null;
    averagingSteps: number;
    store: MediaControllerStore<TElement>;
    constructor(store: MediaControllerStore<TElement>);
    init(): void;
    reset(): void;
    destroy(): void;
    calculateScore(): number | null;
    valueToScore(a: PlaybackRecord, b?: PlaybackRecord): number;
}
export declare class MetricsStatus<TElement> {
    retryCount: number;
    connected: boolean;
    store: MediaControllerStore<TElement>;
    currentMetrics: RawMetrics;
    previousMetrics: RawMetrics | null;
    timeWaiting: number;
    waitingSince: number;
    timeStalled: number;
    stalledSince: number;
    timeUnpaused: number;
    unpausedSince: number;
    constructor(store: MediaControllerStore<TElement>);
    _getTimeWaiting(): number;
    _getTimeStalled(): number;
    _getTimeUnpaused(): number;
    addError(error: string): void;
    incrementStalled(): void;
    incrementWaiting(): void;
    getFirstPlayback(): number;
    setFirstPlayback(): void;
    setPlaybackScore(playbackScore: number): void;
    setConnected(isConnected: boolean): void;
    getMetrics(): {
        current: RawMetrics;
        previous: RawMetrics | null;
    };
}
export type MediaMetrics<TElement> = {
    metrics: MetricsStatus<TElement> | null;
    destroy: () => void;
};
/**
 * Gather playback metrics from a media store and
 * report them to a websocket. Automatically handles a redirect to get the
 * metrics endpoint.
 *
 * @param store Element to capture playback metrics from
 */
export declare function addMediaMetricsToStore<TElement>(store: MediaControllerStore<TElement> | undefined | null, sourceUrl: string | undefined | null, onError?: (error: unknown) => void): MediaMetrics<TElement>;
export {};
