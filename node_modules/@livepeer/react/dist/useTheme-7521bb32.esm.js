import { useClient, useTheme as useTheme$1 } from '@livepeer/core-react/context';
import { createControllerStore } from 'livepeer/media';
import { getDeviceInfo, addEventListeners } from 'livepeer/media/browser';
import * as React from 'react';
import create from 'zustand';
import { jsx } from 'react/jsx-runtime';
import { createStorage } from 'livepeer';
import { createTheme } from 'livepeer/media/browser/styling';

var ThemeContext = /*#__PURE__*/React.createContext(null);

var MediaControllerContext = /*#__PURE__*/React.createContext(create(createControllerStore({
  element: null,
  device: getDeviceInfo(),
  storage: createStorage({}),
  opts: {}
})));

var MediaControllerProvider = function MediaControllerProvider(_ref) {
  var element = _ref.element,
    children = _ref.children,
    opts = _ref.opts;
  var useMediaController = useMediaControllerStore(element, opts);
  return /*#__PURE__*/jsx(MediaControllerContext.Provider, {
    value: useMediaController,
    children: children
  });
};
var useMediaControllerStore = function useMediaControllerStore(element, opts) {
  var client = useClient();
  var store = React.useMemo(function () {
    return create(createControllerStore({
      element: element !== null && element !== void 0 ? element : null,
      device: getDeviceInfo(),
      storage: client.storage,
      opts: opts !== null && opts !== void 0 ? opts : {}
    }));
  }, [element, client === null || client === void 0 ? void 0 : client.storage, opts]);
  React.useEffect(function () {
    var _addEventListeners = addEventListeners(store, opts),
      destroy = _addEventListeners.destroy;
    return function () {
      destroy === null || destroy === void 0 ? void 0 : destroy();
    };
  }, [store, opts]);
  return store;
};

var useMediaController = function useMediaController(selector) {
  var useMediaControllerInternal = React.useContext(MediaControllerContext);
  return useMediaControllerInternal(selector);
};

var useTheme = function useTheme(theme) {
  return useTheme$1(ThemeContext, createTheme, theme);
};

export { MediaControllerProvider as M, ThemeContext as T, useTheme as a, MediaControllerContext as b, useMediaController as u };
